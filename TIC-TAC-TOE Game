#include <iostream>
using namespace std;
char board[3][3]; 
char currentPlayer = 'X'; 

// Function for initializing the board
void initializeBoard() {
    int count = 1;
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            board[i][j] = '0' + count;
            count++;
        }
    }
}

// Function to displaying the current board
void displayBoard() {
    cout << "\n";
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            cout << " " << board[i][j];
            if (j < 2) cout << " |";
        }
        cout << "\n";
        if (i < 2) cout << "---|---|---\n";
    }
    cout << "\n";
}

// Function to check if a move is valid
bool isValidMove(int move) {
    int row = (move - 1) / 3;
    int col = (move - 1) % 3;
    return (move >= 1 && move <= 9 && board[row][col] != 'X' && board[row][col] != 'O');
}

// Function for making a move
void makeMove(int move) {
    int row = (move - 1) / 3;
    int col = (move - 1) % 3;
    board[row][col] = currentPlayer;
}

// Function for switchng the current player
void switchPlayer() {
    currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
}

// Function for checking if a player has won
bool checkWin() {
    // Check rows and columns
    for (int i = 0; i < 3; ++i) {
        if ((board[i][0] == board[i][1] && board[i][1] == board[i][2]) ||  // Check row
            (board[0][i] == board[1][i] && board[1][i] == board[2][i])) {  // Check column
            return true;
        }
    }
    // Checking diagonals
    if ((board[0][0] == board[1][1] && board[1][1] == board[2][2]) ||  // Main diagonal
        (board[0][2] == board[1][1] && board[1][1] == board[2][0])) {  // Anti-diagonal
        return true;
    }
    return false;
}

// Function to check if the game is a draw
bool checkDraw() {
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            if (board[i][j] != 'X' && board[i][j] != 'O') {
                return false;
            }
        }
    }
    return true;
}

// Function for playing the game
void playGame() {
    int move;
    bool gameWon = false;
    bool gameDraw = false;
    initializeBoard();
    while (!gameWon && !gameDraw) {
        displayBoard();
        cout << "Player " << currentPlayer << ", enter your move (1-9): ";
        cin >> move;
        if (isValidMove(move)) {
            makeMove(move);
            // Check if current player has won
            if (checkWin()) {
                displayBoard();
                cout << "Player " << currentPlayer << " wins!\n";
                gameWon = true;
            } 
            else if (checkDraw()) {
                displayBoard();
                cout << "It's a draw!\n";
                gameDraw = true;
            } 
            else {
                switchPlayer();
            }
        } 
        else {
            cout << "Invalid move! Try again.\n";
        }
    }
}

// Main function to start the game and handle replay
int main() {
    char playAgain = 'Y';
    cout << "Welcome to Tic-Tac-Toe!\n";\
    while (playAgain == 'Y' || playAgain == 'y') {
        playGame();
        cout << "Do you want to play again? (Y/N): ";
        cin >> playAgain;
    }
    cout << "Thanks for playing Tic-Tac-Toe!\n";
    return 0;
}
